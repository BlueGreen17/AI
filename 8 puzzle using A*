class PuzzleusingAstar:
    def __init__(self, puzzle_state, parent=None, move=None, g=0):
        self.puzzle_state = puzzle_state
        self.parent = parent
        self.move = move
        self.g = g
        self.h = self.calculate_heuristic()
        self.f = self.g + self.h

    def calculate_heuristic(self):
        goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
        h = 0
        for i in range(3):
            for j in range(3):
                if self.puzzle_state[i][j] != 0:
                    row, col = divmod(self.puzzle_state[i][j] - 1, 3)
                    h += abs(row - i) + abs(col - j)
        return h

    def __lt__(self, other):
        return self.f < other.f

    def __le__(self, other):
        return self.f <= other.f

    def __gt__(self, other):
        return self.f > other.f

    def __ge__(self, other):
        return self.f >= other.f

    def __eq__(self, other):
        return self.f == other.f

    def __ne__(self, other):
        return self.f != other.f

def get_neighbors(node):
    neighbors = []
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
    for i in range(3):
        for j in range(3):
            if node.puzzle_state[i][j] == 0:
                zero_row, zero_col = i, j
                break

    for direction in directions:
        new_row, new_col = zero_row + direction[0], zero_col + direction[1]
        if 0 <= new_row < 3 and 0 <= new_col < 3:
            new_state = [row[:] for row in node.puzzle_state]
            new_state[zero_row][zero_col], new_state[new_row][new_col] = new_state[new_row][new_col], new_state[zero_row][zero_col]
            move = (new_row - zero_row, new_col - zero_col)
            neighbors.append(PuzzleusingAstar(new_state, node, move, node.g + 1))
    return neighbors

def reconstruct_path(node):
    path = []
    while node:
        path.append((node.move, node.puzzle_state))
        node = node.parent
    return path[::-1]

def a_star_search(initial_state):
    open_list = [initial_state]
    closed_set = set()

    while open_list:
        open_list.sort(key=lambda x: x.f)
        current_node = open_list.pop(0)

        if current_node.puzzle_state == [[1, 2, 3], [4, 5, 6], [7, 8, 0]]:
            return reconstruct_path(current_node)

        closed_set.add(tuple(map(tuple, current_node.puzzle_state)))

        for neighbor in get_neighbors(current_node):
            if tuple(map(tuple, neighbor.puzzle_state)) not in closed_set:
                open_list.append(neighbor)

    return None

initial_state = PuzzleusingAstar([[1, 2, 3], [4, 0, 5], [7, 8, 6]])
solution = a_star_search(initial_state)
if solution:
    print("Solution found:")
    for i, (move, state) in enumerate(solution):
        print(f"Step {i + 1}: Move {move}")
        for row in state:
            print(row)
        print()
else:
    print("No solution found")

