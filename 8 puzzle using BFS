import heapq

class Puzzle:
    def __init__(self, puzzle_state, parent=None, move=None):
        self.puzzle_state = puzzle_state
        self.parent = parent
        self.move = move
        self.cost = self.calculate_cost()

    def calculate_cost(self):
        goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
        cost = 0
        for i in range(3):
            for j in range(3):
                if self.puzzle_state[i][j] != 0:
                    row, col = divmod(self.puzzle_state[i][j] - 1, 3)
                    cost += abs(row - i) + abs(col - j)
        return cost

    def __lt__(self, other):
        return self.cost < other.cost

def get_neighbors(node):
    neighbors = []
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
    for i in range(3):
        for j in range(3):
            if node.puzzle_state[i][j] == 0:
                zero_row, zero_col = i, j
                break

    for direction in directions:
        new_row, new_col = zero_row + direction[0], zero_col + direction[1]
        if 0 <= new_row < 3 and 0 <= new_col < 3:
            new_state = [row[:] for row in node.puzzle_state]
            new_state[zero_row][zero_col], new_state[new_row][new_col] = new_state[new_row][new_col], new_state[zero_row][zero_col]
            neighbors.append(PuzzleNode(new_state, node, direction))
    return neighbors

def reconstruct_path(node):
    path = []
    while node:
        path.append(node.puzzle_state)
        node = node.parent
    return path[::-1]

def best_first_search(initial_state):
    heap = []
    visited_states = set()
    heapq.heappush(heap, initial_state)

    while heap:
        current_node = heapq.heappop(heap)
        visited_states.add(tuple(map(tuple, current_node.puzzle_state)))

        if current_node.puzzle_state == [[1, 2, 3], [4, 5, 6], [7, 8, 0]]:
            return reconstruct_path(current_node)

        for neighbor in get_neighbors(current_node):
            if tuple(map(tuple, neighbor.puzzle_state)) not in visited_states:
                heapq.heappush(heap, neighbor)
                visited_states.add(tuple(map(tuple, neighbor.puzzle_state)))

    return None

initial_state = PuzzleNode([[1, 2, 3], [4, 0, 5], [7, 8, 6]])
solution = best_first_search(initial_state)

if solution:
    print("Solution found:")
    for i, state in enumerate(solution):
        print(f"Step {i + 1}:")
        for row in state:
            print(row)
        print()
else:
    print("No solution found.")
