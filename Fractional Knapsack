class Item:
    def __init__(self, weight, value):
        self.weight = weight
        self.value = value
        self.ratio = value / weight

def swap(a, b):
    temp = a
    a = b
    b = temp

def partition(items, low, high):
    pivot = items[high].ratio
    i = low - 1

    for j in range(low, high):
        if items[j].ratio > pivot:
            i += 1
            items[i], items[j] = items[j], items[i]
    
    items[i + 1], items[high] = items[high], items[i + 1]
    return i + 1

def quickSort(items, low, high):
    if low < high:
        pi = partition(items, low, high)
        quickSort(items, low, pi - 1)
        quickSort(items, pi + 1, high)

def fractionalKnapsack(items, n, capacity):
    quickSort(items, 0, n - 1)

    currentWeight = 0
    totalValue = 0.0

    for i in range(n):
        if currentWeight + items[i].weight <= capacity:
            currentWeight += items[i].weight
            totalValue += items[i].value
        else:
            remainingCapacity = capacity - currentWeight
            totalValue += (remainingCapacity / items[i].weight) * items[i].value
            break

    print("Maximum value in knapsack:", "{:.2f}".format(totalValue))

if __name__ == "__main__":
    n = int(input("Enter the number of items: "))

    items = []
    print("Enter the weight and value of each item:")
    for _ in range(n):
        weight, value = map(int, input().split())
        items.append(Item(weight, value))

    capacity = int(input("Enter the knapsack capacity: "))

    fractionalKnapsack(items, n, capacity)
